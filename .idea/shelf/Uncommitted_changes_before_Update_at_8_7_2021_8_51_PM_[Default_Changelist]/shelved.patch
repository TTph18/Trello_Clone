Index: trello_clone/lib/screens/board_screen/board_screen.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:ui';\r\n\r\nimport 'package:animate_icons/animate_icons.dart';\r\nimport 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/painting.dart';\r\nimport 'package:flutter/widgets.dart';\r\n\r\n// ignore: import_of_legacy_library_into_null_safe\r\nimport 'package:trello_clone/drag_and_drop/drag_and_drop_item.dart';\r\nimport 'package:trello_clone/drag_and_drop/drag_and_drop_list.dart';\r\nimport 'package:trello_clone/drag_and_drop/drag_and_drop_lists.dart';\r\nimport 'package:trello_clone/icons/app_icons.dart';\r\nimport 'package:trello_clone/models/boards.dart';\r\nimport 'package:trello_clone/models/cards.dart';\r\nimport 'package:trello_clone/models/lists.dart';\r\nimport 'package:trello_clone/models/user.dart';\r\nimport 'package:trello_clone/screens/board_screen/end_drawer.dart';\r\nimport 'package:trello_clone/screens/board_screen/move_board_screen.dart';\r\nimport 'package:trello_clone/screens/card_screen/card_screen.dart';\r\nimport 'package:trello_clone/services/database.dart';\r\nimport 'package:trello_clone/widgets/reuse_widget/avatar.dart';\r\n\r\nimport '../../route_path.dart';\r\n\r\nclass AddListCard extends StatefulWidget {\r\n  @override\r\n  AddListCardState createState() => AddListCardState();\r\n}\r\n\r\nclass AddListCardState extends State<AddListCard> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(0),\r\n      child: Container(\r\n        child: Card(\r\n          color: Color.fromRGBO(244, 245, 247, 1),\r\n          child: InkWell(\r\n            onTap: () {},\r\n            child: Ink(\r\n              width: 320,\r\n              child: Column(\r\n                children: [\r\n                  SizedBox(\r\n                    height: 15,\r\n                  ),\r\n                  Align(\r\n                    alignment: Alignment.center,\r\n                    child: Text(\"Thêm danh sách\",\r\n                        style: TextStyle(\r\n                          fontWeight: FontWeight.bold,\r\n                          fontSize: 16,\r\n                          color: Colors.green,\r\n                        )),\r\n                  ),\r\n                  SizedBox(\r\n                    height: 15,\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass tag extends StatelessWidget {\r\n  final Color tagColor;\r\n\r\n  tag(this.tagColor);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsets.fromLTRB(0, 0, 8, 8),\r\n      child: Container(\r\n        width: 35,\r\n        height: 20,\r\n        decoration: BoxDecoration(\r\n          color: tagColor,\r\n          borderRadius: BorderRadius.all(Radius.circular(2)),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass tagList extends StatelessWidget {\r\n  final List<tag> _list;\r\n\r\n  tagList(this._list);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Wrap(\r\n      children: [for (var i = 0; i < _list.length; i++) _list[i]],\r\n    );\r\n  }\r\n}\r\n\r\nclass _card extends StatefulWidget {\r\n  final Cards card;\r\n  final String name;\r\n\r\n  _card(this.name, this.card);\r\n\r\n  @override\r\n  _cardState createState() => _cardState(name, card);\r\n}\r\n\r\nclass _cardState extends State<_card> {\r\n  late Cards card;\r\n  late String name;\r\n  List<tag> tags = [];\r\n  late bool iconSeen = false;\r\n  late DateTime dateStart;\r\n  late TimeOfDay timeStart;\r\n  late TimeOfDay timeEnd;\r\n  ///Set year 2000 if user didn't chose time\r\n  late DateTime dateEnd;\r\n\r\n  ///Set year 2000 if user didn't chose time\r\n  late bool isFinish = false;\r\n  late bool iconDetail = false;\r\n  late bool iconChecklist = false;\r\n  late int numCom = 0;\r\n  late int numFile = 0;\r\n  late int numFinish = 4;\r\n  late int numTotal = 4;\r\n  List<Image> avas = [];\r\n\r\n  _cardState(this.name, this.card);\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    name = card.cardName;\r\n    dateStart = DateTime.utc(2001, 11, 1);\r\n    dateEnd = DateTime.utc(2021, 6, 12, 10, 11, 12);\r\n    isFinish = card.status;\r\n    tags = [\r\n      tag(Color(int.parse(\"0xff61bd4f\"))),\r\n      tag(Color(int.parse(\"0xfff2d600\"))),\r\n      tag(Color(int.parse(\"0xffffab4a\"))),\r\n    ];\r\n    iconSeen = true;\r\n    iconDetail = true;\r\n    numCom = 2;\r\n    numFile = 3;\r\n    avas = [\r\n      Image.asset('assets/images/BlueBG.png'),\r\n      Image.asset('assets/images/BlueBG.png'),\r\n    ];\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var contents = <Widget>[];\r\n\r\n    /// Tag line\r\n    var contentItem = <Widget>[];\r\n    if (tags.length != 0)\r\n      for (var i = 0; i < tags.length; i++) contentItem.add(tags[i]);\r\n    contents.add(Align(\r\n      alignment: Alignment.centerLeft,\r\n      child: Wrap(\r\n        children: contentItem,\r\n      ),\r\n    ));\r\n\r\n    /// Title line\r\n    contents.add(\r\n      Align(\r\n        alignment: Alignment.centerLeft,\r\n        child: Text(card.cardName,\r\n            style: TextStyle(\r\n              fontSize: 18,\r\n              color: Colors.black,\r\n            )),\r\n      ),\r\n    );\r\n\r\n    /// Icons line\r\n    contentItem = <Widget>[];\r\n    if (iconSeen)\r\n      contentItem.add(\r\n        Icon(\r\n          Icons.remove_red_eye_outlined,\r\n          size: 20,\r\n        ),\r\n      );\r\n    if (dateStart.year > 2000 || dateEnd.year > 2000)\r\n      contentItem.add(CreateDateString(dateStart, dateEnd, isFinish));\r\n    if (iconDetail)\r\n      contentItem.add(\r\n        Icon(\r\n          Icons.subject,\r\n          size: 20,\r\n        ),\r\n      );\r\n    if (numCom > 0) {\r\n      contentItem.add(Wrap(\r\n        spacing: 2,\r\n        children: [\r\n          Icon(\r\n            MyFlutterApp.comment_empty,\r\n            size: 17,\r\n          ),\r\n          Text(\r\n            numCom.toString(),\r\n          ),\r\n        ],\r\n      ));\r\n    }\r\n    if (numFile > 0) {\r\n      contentItem.add(Wrap(spacing: 2, children: [\r\n        Icon(\r\n          Icons.attach_file,\r\n          size: 17,\r\n        ),\r\n        Text(\r\n          numFile.toString(),\r\n        ),\r\n      ]));\r\n    }\r\n    if (numTotal > 0) contentItem.add(CreateChecklistItem(numFinish, numTotal));\r\n    contents.add(Padding(\r\n        padding: const EdgeInsets.fromLTRB(0, 8, 0, 0),\r\n        child: Wrap(spacing: 4, runSpacing: 4, children: contentItem)));\r\n\r\n    /// Avatar line\r\n    contentItem = <Widget>[];\r\n    if (avas.length != 0)\r\n      for (var i = 0; i < avas.length; i++)\r\n        contentItem.add(Padding(\r\n          padding: const EdgeInsets.fromLTRB(8, 0, 0, 0),\r\n          child: avatar(40, 40, Color.fromRGBO(255, 255, 255, 0), avas[i]),\r\n        ));\r\n    contents.add(Padding(\r\n        padding: const EdgeInsets.fromLTRB(0, 8, 0, 0),\r\n        child: Row(\r\n          mainAxisAlignment: MainAxisAlignment.end,\r\n          children: contentItem,\r\n        )));\r\n\r\n    return Card(\r\n      color: Colors.white,\r\n      child: InkWell(\r\n        customBorder: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.circular(6),\r\n        ),\r\n        onTap: () {\r\n          ///TODO: Link to card detail screen\r\n          Route route =\r\n              MaterialPageRoute(builder: (context) => CardScreen(name, card));\r\n          Navigator.push(context, route);\r\n        },\r\n        child: Ink(\r\n          width: 308,\r\n          child: Container(\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(8.0),\r\n              child: Column(\r\n                children: contents,\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass NewCard extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Card(\r\n      color: Colors.white,\r\n      child: TextField(),\r\n    );\r\n  }\r\n}\r\n\r\nclass ListCard {\r\n  final Lists list;\r\n  final String name;\r\n  List<_card> children;\r\n  bool isLast;\r\n\r\n  ListCard(\r\n      {required this.list,\r\n      required this.name,\r\n      required this.children,\r\n      required this.isLast});\r\n}\r\n\r\nWidget CreateDateString(DateTime dateStart, DateTime dateEnd, bool isFinish) {\r\n  var contents = <Widget>[];\r\n  var color = const Color(0xffFFFFFF);\r\n  if (dateEnd.year > 2000) if (isFinish)\r\n    color = const Color(0xff00AF00);\r\n  else if (dateEnd.isBefore(DateTime.now()))\r\n    color = const Color(0xffFF0000);\r\n  else if (dateEnd.isBefore(DateTime.now().add(Duration(days: 1))))\r\n    color = const Color(0xffFFFF00);\r\n\r\n  /// Icons\r\n  contents.add(\r\n    Icon(\r\n      Icons.access_time,\r\n      size: 17,\r\n    ),\r\n  );\r\n\r\n  /// Text\r\n  String datestr;\r\n  if (dateStart.year > 2000) {\r\n    datestr = \"Ngày \" + dateStart.day.toString();\r\n    if (dateEnd.year > 2000) {\r\n      if (dateStart.month != dateEnd.month)\r\n        datestr = datestr + \" tháng \" + dateStart.month.toString();\r\n      datestr = datestr +\r\n          \" - \" +\r\n          \"Ngày \" +\r\n          dateEnd.day.toString() +\r\n          \" tháng \" +\r\n          dateEnd.month.toString();\r\n    } else\r\n      datestr = datestr + \" tháng \" + dateStart.month.toString();\r\n  } else\r\n    datestr =\r\n        \"Ngày \" + dateEnd.day.toString() + \" tháng \" + dateEnd.month.toString();\r\n  contents.add(Text(datestr));\r\n\r\n  /// Design\r\n  return Padding(\r\n    padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),\r\n    child: Container(\r\n      decoration: BoxDecoration(\r\n        borderRadius: BorderRadius.all(Radius.circular(2)),\r\n        color: color,\r\n      ),\r\n      child: Wrap(children: contents),\r\n    ),\r\n  );\r\n}\r\n\r\nWidget CreateChecklistItem(int finish, int total) {\r\n  var contents = <Widget>[];\r\n  var color = const Color(0xffFFFFFF);\r\n  if (finish == total) color = const Color(0xff00AF00);\r\n\r\n  /// Icons\r\n  contents.add(\r\n    Icon(\r\n      Icons.check_box_outlined,\r\n      size: 17,\r\n    ),\r\n  );\r\n\r\n  /// Text\r\n  String contentstr = finish.toString() + \"/\" + total.toString();\r\n  contents.add(Text(contentstr));\r\n\r\n  /// Design\r\n  return Padding(\r\n      padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),\r\n      child: Container(\r\n        decoration: BoxDecoration(\r\n          borderRadius: BorderRadius.all(Radius.circular(2)),\r\n          color: color,\r\n        ),\r\n        child: Wrap(children: contents),\r\n      ));\r\n}\r\n\r\nclass BoardScreen extends StatefulWidget {\r\n  final Boards boards;\r\n  final bool isShowDrawer;\r\n\r\n  BoardScreen(this.boards, this.isShowDrawer);\r\n\r\n  @override\r\n  BoardScreenState createState() => BoardScreenState(boards, isShowDrawer);\r\n}\r\n\r\nclass BoardScreenState extends State<BoardScreen> {\r\n  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();\r\n  late Future<Boards> futureBoards;\r\n  late Future<Users> futureUsers;\r\n  late Future<List<Lists>> futureLists;\r\n  late List<Lists> listList = [];\r\n  late List<Cards> listCard = [];\r\n  late Boards boards;\r\n  late bool isShowDrawer;\r\n  late List<String> listName = [];\r\n  late List<_card> cards;\r\n  var controller = AnimateIconController();\r\n  AssetImage bg = AssetImage(\"assets/images/BlueBG.png\");\r\n\r\n  BoardScreenState(this.boards, this.isShowDrawer);\r\n\r\n  late List<ListCard> _lists;\r\n  late List<bool> isTapNewCard = List.filled(_lists.length, false);\r\n  TextEditingController newCardController = TextEditingController();\r\n  late List<bool> isTapChangeListName = List.filled(_lists.length + 1, false);\r\n  TextEditingController changeListNameController = TextEditingController();\r\n  late bool isTapNewList = false;\r\n  TextEditingController newListController = TextEditingController();\r\n\r\n  late List<ScrollController> controllers = [];\r\n\r\n  Future<Boards> getBoards() async {\r\n    var doc = await DatabaseService.getBoardData(boards.boardID);\r\n    Boards temp = Boards.fromDocument(doc);\r\n    return temp;\r\n  }\r\n\r\n  Future<Users> getBoardUser() async {\r\n    var doc = await DatabaseService.getUserData(boards.createdBy);\r\n    Users temp = Users.fromDocument(doc);\r\n    return temp;\r\n  }\r\n\r\n  Future<List<Lists>> getLists() async {\r\n    List<Lists> list = [];\r\n    var doc = await DatabaseService.getlistList(boards.boardID);\r\n    for (var item in doc) {\r\n      Lists temp = Lists.fromDocument(item);\r\n      list.add(temp);\r\n    }\r\n    return list;\r\n  }\r\n\r\n  Future<List<Cards>> getCards() async {\r\n    List<Cards> list = [];\r\n    var doc = await DatabaseService.getListCard(boards.boardID);\r\n    for (var item in doc) {\r\n      Cards temp = Cards.fromDocument(item);\r\n      list.add(temp);\r\n    }\r\n    return list;\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    futureBoards = getBoards();\r\n    futureUsers = getBoardUser();\r\n    futureLists = getLists();\r\n\r\n    for (int i = 0; i < boards.listNumber; i++) {\r\n      listName.add(\"\");\r\n      listList.add(new Lists(\r\n          listID: \"\", listName: \"\", position: 0, cardList: [], cardNumber: 0));\r\n    }\r\n    for (int i = 0; i < listName.length + 1; i++)\r\n      controllers.add(new ScrollController());\r\n\r\n    isTapNewCard = List.filled(listName.length + 1, false);\r\n    isTapNewList = false;\r\n    Cards nullCard = new Cards(\r\n        cardID: \"\",\r\n        cardName: \"\",\r\n        createdBy: \"\",\r\n        description: \"\",\r\n        startDate: \"\",\r\n        startTime: \"\",\r\n        dueDate: \"\",\r\n        dueTime: \"\",\r\n        assignedUser: [],\r\n        status: false,\r\n        listID: \"\",\r\n        boardID: \"\");\r\n    cards = [\r\n      _card(\"Thẻ 1\", nullCard),\r\n    ];\r\n    _lists = List.generate(listName.length + 1, (outerIndex) {\r\n      if (outerIndex < listName.length)\r\n        return ListCard(\r\n          list: listList[outerIndex],\r\n          name: listName[outerIndex],\r\n          children:\r\n              List.generate(cards.length, (innerIndex) => cards[innerIndex]),\r\n          isLast: false,\r\n        );\r\n      else\r\n        return ListCard(\r\n          list: new Lists(\r\n              listID: \"\",\r\n              listName: \"\",\r\n              position: 0,\r\n              cardList: [],\r\n              cardNumber: 0),\r\n          name: \"Add List\",\r\n          children: [],\r\n          isLast: true,\r\n        );\r\n    });\r\n    if (isShowDrawer) _scaffoldKey.currentState?.openEndDrawer();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return FutureBuilder(\r\n        future: Future.wait([futureBoards, futureUsers]),\r\n        builder: (BuildContext context, AsyncSnapshot snapshot) {\r\n          Users boardOwner;\r\n          if (snapshot.hasData) {\r\n            boards = snapshot.data[0];\r\n            boardOwner = snapshot.data[1];\r\n          } else\r\n            return Container(\r\n                alignment: FractionalOffset.center,\r\n                child: CircularProgressIndicator());\r\n          return Scaffold(\r\n            key: _scaffoldKey,\r\n            backgroundColor: const Color.fromRGBO(0, 121, 190, 1.0),\r\n            appBar: AppBar(\r\n              title: isTapNewList\r\n                  ? Text(\"Thêm danh sách\")\r\n                  : isTapNewCard.contains(true)\r\n                      ? Text(\"Thêm thẻ\")\r\n                      : isTapChangeListName.contains(true)\r\n                          ? Text(\"Chỉnh sửa tên danh sách\")\r\n                          : Text(boards.boardName),\r\n              backgroundColor: const Color.fromRGBO(0, 64, 126, 1.0),\r\n              leading: (isTapNewList ||\r\n                      isTapNewCard.contains(true) ||\r\n                      isTapChangeListName.contains(true))\r\n                  ? IconButton(\r\n                      onPressed: () {\r\n                        setState(\r\n                          () {\r\n                            if (isTapNewList) {\r\n                              isTapNewList = false;\r\n                              newListController.text = \"\";\r\n                            }\r\n                            int index = isTapNewCard\r\n                                .indexWhere((element) => element == true);\r\n                            if (index != -1) {\r\n                              isTapNewCard[index] = false;\r\n                              newCardController.text = \"\";\r\n                            }\r\n                            index = isTapChangeListName\r\n                                .indexWhere((element) => element == true);\r\n                            if (index != -1) {\r\n                              isTapChangeListName[index] = false;\r\n                              changeListNameController.text = \"\";\r\n                            }\r\n                          },\r\n                        );\r\n                      },\r\n                      icon: Icon(Icons.close))\r\n                  : Builder(\r\n                      builder: (BuildContext context) {\r\n                        return IconButton(\r\n                          icon: const Icon(Icons.arrow_back),\r\n                          onPressed: () {\r\n                            Navigator.of(context).pushNamed(MAIN_SCREEN);\r\n                          },\r\n                        );\r\n                      },\r\n                    ),\r\n              actions: (isTapNewList ||\r\n                      isTapNewCard.contains(true) ||\r\n                      isTapChangeListName.contains(true))\r\n                  ? [\r\n                      IconButton(\r\n                        icon: const Icon(Icons.check),\r\n                        onPressed: () {\r\n                          if (isTapNewList) {\r\n                            if (newListController.text != \"\") {\r\n                              DatabaseService.addList(\r\n                                  boards.boardID, newListController.text);\r\n                              setState(\r\n                                () {\r\n                                  futureLists = getLists();\r\n                                  listName.add(newListController.text);\r\n\r\n                                  ///TODO: Cant update widget\r\n                                  isTapNewList = false;\r\n                                  newListController.text = \"\";\r\n                                },\r\n                              );\r\n                            }\r\n                          }\r\n                          int index = isTapNewCard\r\n                              .indexWhere((element) => element == true);\r\n                          if (index != -1) {\r\n                            if (newCardController.text != \"\") {\r\n                              ///TODO: Add new card to list [index]\r\n                              setState(\r\n                                () {\r\n                                  Route route = MaterialPageRoute(\r\n                                      builder: (context) =>\r\n                                          BoardScreen(boards, true));\r\n                                  Navigator.push(context, route);\r\n                                  isTapNewCard[index] = false;\r\n                                  newListController.text = \"\";\r\n                                },\r\n                              );\r\n                            }\r\n                          }\r\n                          index = isTapChangeListName\r\n                              .indexWhere((element) => element == true);\r\n                          if (index != -1) {\r\n                            if (newCardController.text != \"\") {\r\n                              //TODO: Rename list - ERROR\r\n                              DatabaseService.renameList(\r\n                                  boards.boardID,\r\n                                  _lists[index].list.listID,\r\n                                  newCardController.text);\r\n                              setState(\r\n                                () {\r\n                                  ///TODO: Reload list name [index]\r\n                                  isTapChangeListName[index] = false;\r\n                                },\r\n                              );\r\n                            }\r\n                          }\r\n                        },\r\n                      ),\r\n                    ]\r\n                  : [\r\n                      IconButton(\r\n                        icon: const Icon(MyFlutterApp.bell),\r\n                        onPressed: () {\r\n                          Navigator.of(context).pushNamed(NOTIFICATION_SCREEN);\r\n                        },\r\n                      ),\r\n                      IconButton(\r\n                        icon: const Icon(Icons.more_horiz),\r\n                        onPressed: () {\r\n                          _scaffoldKey.currentState!.openEndDrawer();\r\n                        },\r\n                      ),\r\n                    ],\r\n            ),\r\n            endDrawer: mainMenu(\r\n                Users(\r\n                  userID: boardOwner.userID,\r\n                  userName: boardOwner.userName,\r\n                  profileName: boardOwner.profileName,\r\n                  email: boardOwner.email,\r\n                  avatar: boardOwner.avatar,\r\n                  workspaceList: boardOwner.workspaceList,\r\n                ),\r\n                boards),\r\n            body: Container(\r\n                decoration: BoxDecoration(\r\n                  image: DecorationImage(\r\n                    image: bg,\r\n                    fit: BoxFit.cover,\r\n                  ),\r\n                ),\r\n                child: StreamBuilder(\r\n                    stream: DatabaseService.streamLists(boards.boardID),\r\n                    builder: (BuildContext context, AsyncSnapshot snapshot) {\r\n                      if (!snapshot.hasData) {\r\n                        return Container(\r\n                            alignment: FractionalOffset.center,\r\n                            child: CircularProgressIndicator());\r\n                      } else {\r\n                        listName.clear();\r\n                        for (var item in snapshot.data.docs) {\r\n                          Lists _list = Lists.fromDocument(item);\r\n                          listList.add(_list);\r\n                          listName.add(_list.listName);\r\n                        }\r\n                      }\r\n                      return FutureBuilder(\r\n                          future: getCards(),\r\n                          builder:\r\n                              (BuildContext context, AsyncSnapshot snapshot) {\r\n                            if (!snapshot.hasData) {\r\n                              return Container(\r\n                                  alignment: FractionalOffset.center,\r\n                                  child: CircularProgressIndicator());\r\n                            } else {\r\n                              controllers.clear();\r\n                              _lists.clear();\r\n                              for (var item in snapshot.data) {\r\n                                cards.add(_card(item.cardName, item));\r\n                              }\r\n                            }\r\n                            for (int i = 0; i < listName.length + 1; i++)\r\n                              controllers.add(new ScrollController());\r\n                            _lists = List.generate(\r\n                              listName.length + 1,\r\n                              (outerIndex) {\r\n                                if (outerIndex < listName.length)\r\n                                  return ListCard(\r\n                                    list: listList[outerIndex],\r\n                                    name: listName[outerIndex],\r\n                                    children: List.generate(cards.length,\r\n                                            (innerIndex) => cards[innerIndex]),\r\n                                    isLast: false,\r\n                                  );\r\n                                else\r\n                                  return ListCard(\r\n                                    list: new Lists(\r\n                                        listID: \"\",\r\n                                        listName: \"\",\r\n                                        position: 0,\r\n                                        cardList: [],\r\n                                        cardNumber: 0),\r\n                                    name: \"Add List\",\r\n                                    children: [],\r\n                                    isLast: true,\r\n                                  );\r\n                              },\r\n                            );\r\n                            return DragAndDropLists(\r\n                              children: List.generate(\r\n                                  _lists.length, (index) => _buildList(index)),\r\n                              onItemReorder: _onItemReorder,\r\n                              onListReorder: _onListReorder,\r\n                              axis: Axis.horizontal,\r\n                              listWidth: 320,\r\n                              listDraggingWidth: 288,\r\n                              listDecoration: BoxDecoration(\r\n                                color: Color.fromRGBO(244, 245, 247, 1.0),\r\n                                borderRadius:\r\n                                    BorderRadius.all(Radius.circular(7.0)),\r\n                                boxShadow: <BoxShadow>[\r\n                                  BoxShadow(\r\n                                    color: Colors.black45,\r\n                                    spreadRadius: 3.0,\r\n                                    blurRadius: 6.0,\r\n                                    offset: Offset(2, 3),\r\n                                  ),\r\n                                ],\r\n                              ),\r\n                              listPadding: EdgeInsets.fromLTRB(16, 8, 16, 8),\r\n                            );\r\n                          });\r\n                    })),\r\n            floatingActionButton: FloatingActionButton(\r\n              onPressed: () {},\r\n              child: AnimateIcons(\r\n                startIcon: Icons.zoom_in,\r\n                endIcon: Icons.zoom_out,\r\n                controller: controller = AnimateIconController(),\r\n                onStartIconPress: () {\r\n                  return true;\r\n                },\r\n                onEndIconPress: () {\r\n                  return true;\r\n                },\r\n                duration: Duration(milliseconds: 100),\r\n                startIconColor: Colors.white,\r\n                endIconColor: Colors.white,\r\n                clockwise: true,\r\n              ),\r\n              backgroundColor: Colors.green,\r\n            ),\r\n          );\r\n        });\r\n  }\r\n\r\n  _buildList(int outerIndex) {\r\n    var innerList = _lists[outerIndex];\r\n    if (!innerList.isLast) {\r\n      return DragAndDropList(\r\n        controller: controllers[outerIndex],\r\n        header: Row(\r\n          children: <Widget>[\r\n            Expanded(\r\n              child: Container(\r\n                decoration: BoxDecoration(\r\n                  borderRadius:\r\n                      BorderRadius.vertical(top: Radius.circular(7.0)),\r\n                  color: Color.fromRGBO(244, 245, 247, 1.0),\r\n                ),\r\n                padding: EdgeInsets.all(10),\r\n                child: Row(\r\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                  children: [\r\n                    isTapChangeListName[outerIndex]\r\n                        ? Container(\r\n                            width: 200,\r\n                            child: TextField(\r\n                              autofocus: true,\r\n                              controller: changeListNameController,\r\n                            ),\r\n                          )\r\n                        : InkWell(\r\n                            onTap: () {\r\n                              changeListNameController.text = '';\r\n                              setState(() {\r\n                                isTapChangeListName[outerIndex] = true;\r\n                              });\r\n                            },\r\n                            child: Text(\r\n                              '${innerList.name}',\r\n                              style: TextStyle(\r\n                                  color: Colors.black,\r\n                                  fontSize: 18,\r\n                                  fontWeight: FontWeight.bold),\r\n                            ),\r\n                          ),\r\n                    Container(\r\n                      height: 18,\r\n                      width: 20,\r\n                      child: PopupMenuButton(\r\n                        iconSize: 25,\r\n                        padding: EdgeInsets.zero,\r\n                        icon: Icon(Icons.more_vert),\r\n                        onSelected: (value) {\r\n                          if (value == 1) {\r\n                            setState(() {\r\n                              isTapNewCard[outerIndex] = true;\r\n                            });\r\n                            controllers[outerIndex].animateTo(\r\n                              controllers[outerIndex].position.maxScrollExtent -\r\n                                  5,\r\n                              curve: Curves.easeOut,\r\n                              duration: const Duration(milliseconds: 300),\r\n                            );\r\n                          } else if (value == 2) {\r\n                            Route route = MaterialPageRoute(\r\n\r\n                                ///TODO: Cant delete list in old board\r\n                                builder: (context) =>\r\n                                    MoveBoardScreen(boards, innerList.list));\r\n                            Navigator.push(context, route);\r\n                          } else {\r\n                            showDialog<String>(\r\n                              context: context,\r\n                              builder: (BuildContext context) => AlertDialog(\r\n                                title: const Text(\r\n                                  'Xóa danh sách',\r\n                                  style: TextStyle(fontWeight: FontWeight.bold),\r\n                                ),\r\n                                content: Container(\r\n                                  width:\r\n                                      MediaQuery.of(context).size.width * 0.8,\r\n                                  child: Column(\r\n                                    mainAxisSize: MainAxisSize.min,\r\n                                    children: [\r\n                                      Text(\r\n                                          \"Tất cả các thao tác sẽ bị xóa khỏi thông báo hoạt động. Không thể hoàn tác.\"),\r\n                                      Row(\r\n                                        mainAxisAlignment:\r\n                                            MainAxisAlignment.end,\r\n                                        children: [\r\n                                          TextButton(\r\n                                            child: Text(\r\n                                              'HỦY',\r\n                                              style: TextStyle(\r\n                                                  fontWeight: FontWeight.bold),\r\n                                            ),\r\n                                            onPressed: () {\r\n                                              Navigator.of(context).pop();\r\n                                            },\r\n                                          ),\r\n                                          TextButton(\r\n                                            child: Text(\r\n                                              'XÓA',\r\n                                              style: TextStyle(\r\n                                                  fontWeight: FontWeight.bold),\r\n                                            ),\r\n                                            onPressed: () {\r\n                                              ///TODO: Cant update widget\r\n                                              DatabaseService.deleteList(\r\n                                                  boards.boardID,\r\n                                                  innerList.list.listID);\r\n                                              setState(() {\r\n\r\n                                              });\r\n                                              Navigator.of(context).pop();\r\n                                            },\r\n                                          )\r\n                                        ],\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                            );\r\n                          }\r\n                        },\r\n                        itemBuilder: (context) => [\r\n                          PopupMenuItem(\r\n                            value: 1,\r\n                            child: Text('Thêm thẻ'),\r\n                          ),\r\n                          PopupMenuItem(\r\n                            value: 2,\r\n                            child: Text('Di chuyển danh sách'),\r\n                          ),\r\n                          PopupMenuItem(\r\n                            value: 3,\r\n                            child: Text('Xóa danh sách'),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n        footer: isTapNewCard[outerIndex]\r\n            ? Card(\r\n                color: Colors.white,\r\n                child: InkWell(\r\n                  customBorder: RoundedRectangleBorder(\r\n                    borderRadius: BorderRadius.circular(6),\r\n                  ),\r\n                  child: Ink(\r\n                    width: 308,\r\n                    child: Container(\r\n                      child: Padding(\r\n                        padding: const EdgeInsets.all(8.0),\r\n                        child: TextField(\r\n                          autofocus: true,\r\n                          controller: newCardController,\r\n                          decoration: InputDecoration(\r\n                            hintText: \"Tên thẻ\",\r\n                            hintStyle: TextStyle(\r\n                              fontSize: 18,\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              )\r\n            : TextButton(\r\n                style: TextButton.styleFrom(\r\n                  backgroundColor: Color.fromRGBO(244, 245, 247, 1.0),\r\n                ),\r\n                onPressed: () {\r\n                  setState(() {\r\n                    isTapNewCard[outerIndex] = true;\r\n                  });\r\n                  controllers[outerIndex].animateTo(\r\n                    controllers[outerIndex].position.maxScrollExtent - 5,\r\n                    curve: Curves.easeOut,\r\n                    duration: const Duration(milliseconds: 300),\r\n                  );\r\n                },\r\n                child: Row(\r\n                  mainAxisAlignment: MainAxisAlignment.center,\r\n                  children: <Widget>[\r\n                    Icon(\r\n                      Icons.add,\r\n                      color: Color.fromRGBO(139, 196, 134, 1.0),\r\n                    ),\r\n                    Text(\r\n                      \"Thêm thẻ\",\r\n                      style:\r\n                          TextStyle(color: Color.fromRGBO(129, 184, 120, 1.0)),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n        leftSide: VerticalDivider(\r\n          color: Color.fromRGBO(244, 245, 247, 1.0),\r\n          width: 6,\r\n          thickness: 6,\r\n        ),\r\n        rightSide: VerticalDivider(\r\n          color: Color.fromRGBO(244, 245, 247, 1.0),\r\n          width: 6,\r\n          thickness: 6,\r\n        ),\r\n        maxheight: MediaQuery.of(context).size.height -\r\n            MediaQuery.of(context).viewInsets.bottom,\r\n        children: List.generate(\r\n          innerList.children.length,\r\n          (index) => _buildItem(innerList.children[index]),\r\n        ),\r\n      );\r\n    } else {\r\n      if (isTapNewList) {\r\n        return DragAndDropList(\r\n          controller: controllers[outerIndex],\r\n          maxheight: MediaQuery.of(context).size.height * 0.7,\r\n          header: Card(\r\n            color: Colors.white,\r\n            child: InkWell(\r\n              customBorder: RoundedRectangleBorder(\r\n                borderRadius: BorderRadius.circular(6),\r\n              ),\r\n              child: Ink(\r\n                width: 308,\r\n                child: Container(\r\n                  child: Padding(\r\n                    padding: const EdgeInsets.all(8.0),\r\n                    child: TextField(\r\n                      autofocus: true,\r\n                      controller: newListController,\r\n                      decoration: InputDecoration(\r\n                        hintText: \"Tên danh sách\",\r\n                        hintStyle: TextStyle(\r\n                          fontSize: 18,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n          backgroundColor: Color.fromRGBO(244, 245, 247, 0),\r\n          canDrag: false,\r\n          children: [],\r\n        );\r\n      } else {\r\n        return DragAndDropList(\r\n          controller: controllers[outerIndex],\r\n          maxheight: MediaQuery.of(context).size.height * 0.7,\r\n          header: TextButton(\r\n            style: TextButton.styleFrom(\r\n              backgroundColor: Color.fromRGBO(244, 245, 247, 1.0),\r\n            ),\r\n            onPressed: () {\r\n              setState(() {\r\n                isTapNewList = true;\r\n              });\r\n            },\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: <Widget>[\r\n                Text(\r\n                  \"Thêm danh sách\",\r\n                  style: TextStyle(color: Color.fromRGBO(129, 184, 120, 1.0)),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          backgroundColor: Color.fromRGBO(244, 245, 247, 0),\r\n          canDrag: false,\r\n          children: [],\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    for (int i = 0; i < controllers.length; i++) {\r\n      controllers[i].dispose();\r\n    }\r\n    super.dispose();\r\n  }\r\n\r\n  _buildItem(_card item) {\r\n    return DragAndDropItem(\r\n      child: item,\r\n    );\r\n  }\r\n\r\n  _onItemReorder(\r\n      int oldItemIndex, int oldListIndex, int newItemIndex, int newListIndex) {\r\n    setState(() {\r\n      var movedItem = _lists[oldListIndex].children.removeAt(oldItemIndex);\r\n      _lists[newListIndex].children.insert(newItemIndex, movedItem);\r\n    });\r\n  }\r\n\r\n  _onListReorder(int oldListIndex, int newListIndex) {\r\n    setState(() {\r\n      var movedList = _lists.removeAt(oldListIndex);\r\n      _lists.insert(newListIndex, movedList);\r\n    });\r\n  }\r\n}\r\nTimeOfDay timeConvert(String normTime) {\r\n  int hour;\r\n  int minute;\r\n  String ampm = normTime.substring(normTime.length - 2);\r\n  String result = normTime.substring(0, normTime.indexOf(' '));\r\n  if (ampm == 'AM' && int.parse(result.split(\":\")[1]) != 12) {\r\n    hour = int.parse(result.split(':')[0]);\r\n    if (hour == 12) hour = 0;\r\n    minute = int.parse(result.split(\":\")[1]);\r\n  } else {\r\n    hour = int.parse(result.split(':')[0]) - 12;\r\n    if (hour <= 0) {\r\n      hour = 24 + hour;\r\n    }\r\n    minute = int.parse(result.split(\":\")[1]);\r\n  }\r\n  return TimeOfDay(hour: hour, minute: minute);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- trello_clone/lib/screens/board_screen/board_screen.dart	(revision b8a63d82cf19997f58e90704f50b1cb6f3177951)
+++ trello_clone/lib/screens/board_screen/board_screen.dart	(date 1625752299537)
@@ -410,7 +410,6 @@
   TextEditingController changeListNameController = TextEditingController();
   late bool isTapNewList = false;
   TextEditingController newListController = TextEditingController();
-
   late List<ScrollController> controllers = [];
 
   Future<Boards> getBoards() async {
@@ -739,25 +738,25 @@
                             );
                           });
                     })),
-            floatingActionButton: FloatingActionButton(
-              onPressed: () {},
-              child: AnimateIcons(
-                startIcon: Icons.zoom_in,
-                endIcon: Icons.zoom_out,
-                controller: controller = AnimateIconController(),
-                onStartIconPress: () {
-                  return true;
-                },
-                onEndIconPress: () {
-                  return true;
-                },
-                duration: Duration(milliseconds: 100),
-                startIconColor: Colors.white,
-                endIconColor: Colors.white,
-                clockwise: true,
-              ),
-              backgroundColor: Colors.green,
-            ),
+            //floatingActionButton: FloatingActionButton(
+            //  onPressed: () {},
+            //  child: AnimateIcons(
+            //    startIcon: Icons.zoom_in,
+            //    endIcon: Icons.zoom_out,
+            //    controller: controller = AnimateIconController(),
+            //    onStartIconPress: () {
+            //      return true;
+            //    },
+            //    onEndIconPress: () {
+            //      return true;
+            //    },
+            //    duration: Duration(milliseconds: 100),
+            //    startIconColor: Colors.white,
+            //    endIconColor: Colors.white,
+            //    clockwise: true,
+            //  ),
+            //  backgroundColor: Colors.green,
+            //),
           );
         });
   }
