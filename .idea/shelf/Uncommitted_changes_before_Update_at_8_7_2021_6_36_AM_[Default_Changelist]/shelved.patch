Index: trello_clone/lib/screens/card_screen/card_screen.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:ui';\r\n\r\nimport 'package:animated_icon_button/animated_icon_button.dart';\r\nimport 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:trello_clone/icons/app_icons.dart';\r\nimport 'package:trello_clone/icons/my_flutter_app2_icons.dart';\r\nimport 'package:trello_clone/models/boards.dart';\r\nimport 'package:trello_clone/models/cards.dart';\r\nimport 'package:trello_clone/models/user.dart';\r\nimport 'package:trello_clone/screens/card_screen/move_card_screen.dart';\r\nimport 'package:trello_clone/widgets/reuse_widget/avatar.dart';\r\n\r\nclass CardScreen extends StatefulWidget {\r\n  late String cardName;\r\n\r\n  CardScreen(this.cardName);\r\n\r\n  @override\r\n  CardScreenState createState() => CardScreenState(cardName);\r\n}\r\n\r\nclass CardScreenState extends State<CardScreen> {\r\n  late String cardName;\r\n  late Boards boards;\r\n\r\n  CardScreenState(this.cardName);\r\n\r\n  var descriptionTxtCtrl = TextEditingController();\r\n\r\n  List<Users> users = [\r\n    Users(\r\n      userID: \"12345\",\r\n      userName: \"name1\",\r\n      profileName: \"Name 1\",\r\n      email: '123456@gmail.com',\r\n      avatar: 'assets/images/BlueBG.png',\r\n      workspaceList: [],\r\n    ),\r\n    Users(\r\n      userID: \"12345\",\r\n      userName: \"name2\",\r\n      profileName: \"Name 2\",\r\n      email: '123456@gmail.com',\r\n      avatar: 'assets/images/BlueBG.png',\r\n      workspaceList: [],\r\n    ),\r\n    Users(\r\n      userID: \"12345\",\r\n      userName: \"name3\",\r\n      profileName: \"Name 3\",\r\n      email: '123456@gmail.com',\r\n      avatar: 'assets/images/BlueBG.png',\r\n      workspaceList: [],\r\n    ),\r\n    Users(\r\n      userID: \"12345\",\r\n      userName: \"Test4\",\r\n      profileName: \"Cun cun cute\",\r\n      email: '123456@gmail.com',\r\n      avatar: 'assets/images/BlueBG.png',\r\n      workspaceList: [],\r\n    ),\r\n  ];\r\n  List<Users> pickedUsers = [];\r\n\r\n  ///TODO: Load users from database to pickedUsers\r\n  List<bool> flagPickedUsers = [];\r\n\r\n  ///Use for showing check iconbutton in popup member\r\n\r\n  ///StartDate picker\r\n  ///TODO: Load selectedStartDate from database, if = null, assign Datetime now to it\r\n  var startDateTxtCtrl = TextEditingController();\r\n  DateTime selectedStartDate = DateTime.now();\r\n\r\n  Future<Null> _selectedStartDate(BuildContext context) async {\r\n    final DateTime picked = (await showDatePicker(\r\n        context: context, initialDate: selectedStartDate, initialDatePickerMode: DatePickerMode.day, firstDate: DateTime(2015), lastDate: DateTime(2101)))!;\r\n    setState(() {\r\n      selectedStartDate = picked;\r\n      if (selectedStartDate.year != DateTime.now().year)\r\n        startDateTxtCtrl.text = selectedStartDate.day.toString() + \" thg \" + selectedStartDate.month.toString() + \", \" + selectedStartDate.year.toString();\r\n      else\r\n        startDateTxtCtrl.text = selectedStartDate.day.toString() + \" thg \" + selectedStartDate.month.toString();\r\n    });\r\n  }\r\n\r\n  ///EndDate picker\r\n  ///TODO: Load selectedEndDate from database, if = null, assign Datetime now to it\r\n  var endDateTxtCtrl = TextEditingController();\r\n  DateTime selectedEndDate = DateTime.now();\r\n\r\n  Future<Null> _selectedEndDate(BuildContext context) async {\r\n    final DateTime picked = (await showDatePicker(\r\n        context: context, initialDate: selectedEndDate, initialDatePickerMode: DatePickerMode.day, firstDate: DateTime(2015), lastDate: DateTime(2101)))!;\r\n    setState(() {\r\n      selectedEndDate = picked;\r\n      if (selectedEndDate.year != DateTime.now().year)\r\n        endDateTxtCtrl.text = selectedEndDate.day.toString() + \" thg \" + selectedEndDate.month.toString() + \", \" + selectedEndDate.year.toString();\r\n      else\r\n        endDateTxtCtrl.text = selectedEndDate.day.toString() + \" thg \" + selectedEndDate.month.toString();\r\n    });\r\n  }\r\n\r\n  ///StartTime Picker\r\n  ///TODO: Load selectedStartTime from database, if = null, assign TimeOfDay(hour: 9, minute: 0) to it\r\n  TimeOfDay selectedStartTime = TimeOfDay(hour: 9, minute: 0);\r\n  var startTimeTxtCtrl = TextEditingController();\r\n\r\n  Future<Null> _selectedStartTime(BuildContext context) async {\r\n    final TimeOfDay picked = (await showTimePicker(\r\n      context: context,\r\n      initialTime: selectedStartTime,\r\n    ))!;\r\n    setState(() {\r\n      selectedStartTime = picked;\r\n      startTimeTxtCtrl.text = selectedStartTime.hour.toString() + \":\";\r\n      if (selectedStartTime.minute >= 10)\r\n        startTimeTxtCtrl.text = startTimeTxtCtrl.text + selectedStartTime.minute.toString();\r\n      else\r\n        startTimeTxtCtrl.text = startTimeTxtCtrl.text + \"0\" + selectedStartTime.minute.toString();\r\n    });\r\n  }\r\n\r\n  ///EndTime Picker\r\n  ///TODO: Load selectedEndTime from database, if = null, assign TimeOfDay(hour: 9, minute: 0) to it\r\n  TimeOfDay selectedEndTime = TimeOfDay(hour: 9, minute: 0);\r\n  var endTimeTxtCtrl = TextEditingController();\r\n\r\n  Future<Null> _selectedEndTime(BuildContext context) async {\r\n    final TimeOfDay picked = (await showTimePicker(\r\n      context: context,\r\n      initialTime: selectedEndTime,\r\n    ))!;\r\n    setState(() {\r\n      selectedEndTime = picked;\r\n      endTimeTxtCtrl.text = selectedEndTime.hour.toString() + \":\";\r\n      if (selectedEndTime.minute >= 10)\r\n        endTimeTxtCtrl.text = endTimeTxtCtrl.text + selectedEndTime.minute.toString();\r\n      else\r\n        endTimeTxtCtrl.text = endTimeTxtCtrl.text + \"0\" + selectedEndTime.minute.toString();\r\n    });\r\n  }\r\n\r\n  String? selectedNotiTime = \"Không nhắc nhở\";\r\n  List<String> notificationTimeList = [\r\n    \"Không nhắc nhở\",\r\n    \"Vào ngày hết hạn\",\r\n    \"5 phút trước\",\r\n    \"10 phút trước\",\r\n    \"15 phút trước\",\r\n    \"1 giờ trước\",\r\n    \"2 giờ trước\",\r\n    \"1 ngày trước\",\r\n    \"2 ngày trước\"\r\n  ];\r\n\r\n  ///String value to set for startDate, endDate TextButton\r\n  ///TODO: if startDate (timestamp type) from database = null, then string = null\r\n  ///TODO: else startDateStr = \"Bắt đầu vào ngày $selectedDay tháng $selectedMonth, năm $selectedYear lúc $selectedTimeStr\"\r\n  String startDateStr = \"\";\r\n\r\n  ///TODO: if endDate (timestamp type) from database = null, then string = null\r\n  ///TODO: else endDateStr = \"Hết hạn vào ngày $selectedDay tháng $selectedMonth, năm $selectedYear lúc $selectedTimeStr\";\r\n  String endDateStr = \"\";\r\n\r\n  bool isHaveTaskList = true;\r\n  List<String> taskListNames = [\r\n    \"Name 1\",\r\n    \"Name 2\",\r\n    \"Name 3\",\r\n  ];\r\n  bool isAddTask = false;\r\n  bool isChangeTaskListName = false;\r\n  bool isChangeListName = false;\r\n  int xChangeTaskListName = -1;\r\n  int yChangeTaskListName = -1;\r\n  List<List<String>> tasks = [\r\n    [\r\n      \"Name 11\",\r\n      \"Name 12\",\r\n      \"Name 13\",\r\n    ],\r\n    [\r\n      \"Name 21\",\r\n      \"Name 22\",\r\n    ],\r\n    [\r\n      \"Name 31\",\r\n      \"Name 32\",\r\n      \"Name 33\",\r\n    ],\r\n  ];\r\n  List<List<bool>> isTaskDone = [\r\n    [\r\n      true,\r\n      true,\r\n      true,\r\n    ],\r\n    [\r\n      true,\r\n      true,\r\n    ],\r\n    [\r\n      true,\r\n      false,\r\n      true,\r\n    ],\r\n  ];\r\n  List<bool> isShow = [\r\n    true,\r\n    true,\r\n    true,\r\n  ];\r\n  List<List<TextEditingController>> controllers = [];\r\n  List<TextEditingController> controllersList = [];\r\n\r\n  ///For comment\r\n  var commentEnterTxtCtrl = TextEditingController();\r\n\r\n  ///TODO: Load currentUser data\r\n  ///Users currentUser = ...;\r\n  ///TODO: Delete this when load current data\r\n  String currentUserID = \"12345\";\r\n  String currentUserName = \"Test4\";\r\n  String currentUserAvatar = \"assets/images/BlueBG.png\";\r\n\r\n  ///TODO: Load comment list\r\n  List<Comments> commentList = [];\r\n\r\n  ///TODO: Delete these when comment list is loaded\r\n  ///TODO: in UI, change the commentUserIDList to commentList and match suitable values\r\n  List<String> commentUserIDList = [\"12345\", \"1234\", \"1234\"];\r\n  List<String> commentUserNameList = [\"Test4\", \"name1\", \"name1\"];\r\n  List<String> commentUserAvatarList = [\"assets/images/BlueBG.png\", \"assets/images/BlueBG.png\", \"assets/images/BlueBG.png\"];\r\n  List<String> commentContentList = [\"Test comment for Test4\", \"Test comment for name1\", \"Test test test test test comment 2 for name1\"];\r\n  List<DateTime> commentDateList = [DateTime(2021, 7, 7, 8, 30), DateTime(2021, 7, 4, 9, 30), DateTime(2021, 6, 30, 10, 30)];\r\n\r\n  List<TextEditingController> commentContentTxtCtrlList = [];\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    for (Users user in users) {\r\n      var foundUser = pickedUsers.where((element) => element.userID == user.userID);\r\n      if (foundUser.isNotEmpty)\r\n        flagPickedUsers.add(true);\r\n      else\r\n        flagPickedUsers.add(false);\r\n    }\r\n\r\n    for (int index = 0; index < commentUserIDList.length; index++) {\r\n      commentContentTxtCtrlList.add(TextEditingController());\r\n      commentContentTxtCtrlList[index].text = commentContentList[index];\r\n    }\r\n\r\n    tasks = [\r\n      [\r\n        \"Name 11\",\r\n        \"Name 12\",\r\n        \"Name 13\",\r\n      ],\r\n      [\r\n        \"Name 21\",\r\n        \"Name 22\",\r\n      ],\r\n      [\r\n        \"Name 31\",\r\n        \"Name 32\",\r\n        \"Name 33\",\r\n      ],\r\n    ];\r\n    controllers = [];\r\n    for (int i = 0; i < tasks.length; i++) {\r\n      controllersList.add(TextEditingController.fromValue(TextEditingValue(text: taskListNames[i])));\r\n      controllers.add([]);\r\n      for (int j = 0; j < tasks[i].length; j++) {\r\n        controllers[i].add(new TextEditingController.fromValue(TextEditingValue(text: tasks[i][j])));\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      resizeToAvoidBottomInset: true,\r\n      backgroundColor: Color.fromRGBO(244, 245, 247, 1.0),\r\n      appBar: AppBar(\r\n          backgroundColor: Colors.white,\r\n          title: Text(\r\n            isAddTask\r\n                ? \"Mục mới\"\r\n                : isChangeTaskListName\r\n                    ? \"Chỉnh sửa mục\"\r\n                    : isChangeListName\r\n                        ? \"Chỉnh sửa danh sách công việc\"\r\n                        : \"\",\r\n            style: TextStyle(\r\n              color: Colors.black,\r\n            ),\r\n          ),\r\n          leading: IconButton(\r\n            icon: Icon(\r\n              Icons.close,\r\n              color: Colors.black,\r\n            ),\r\n            onPressed: () {\r\n              if (isAddTask) {\r\n                isAddTask = false;\r\n                FocusScope.of(context).unfocus();\r\n              } else if (isChangeTaskListName) {\r\n                isChangeTaskListName = false;\r\n                xChangeTaskListName = -1;\r\n                yChangeTaskListName = -1;\r\n                FocusScope.of(context).unfocus();\r\n              } else if (isChangeListName) {\r\n                isChangeListName = false;\r\n                xChangeTaskListName = -1;\r\n                FocusScope.of(context).unfocus();\r\n              } else\r\n                Navigator.of(context).pop();\r\n            },\r\n          ),\r\n          elevation: 0.0,\r\n          actions: [\r\n            isAddTask || isChangeTaskListName || isChangeListName\r\n                ? IconButton(\r\n                    icon: Icon(\r\n                      Icons.check,\r\n                      color: Colors.black,\r\n                    ),\r\n                    onPressed: () {\r\n                      if (isAddTask) {\r\n                        ///TODO: Add new task\r\n                        isAddTask = false;\r\n                        FocusScope.of(context).unfocus();\r\n                      } else if (isChangeTaskListName) {\r\n                        ///TODO: Change value at [xChangeTaskListName][yChangeTaskListName]\r\n                        isChangeTaskListName = false;\r\n                        xChangeTaskListName = -1;\r\n                        yChangeTaskListName = -1;\r\n                        FocusScope.of(context).unfocus();\r\n                      } else if (isChangeListName) {\r\n                        ///TODO: Change name at [xChangeTaskListName]\r\n                        isChangeListName = false;\r\n                        xChangeTaskListName = -1;\r\n                        FocusScope.of(context).unfocus();\r\n                      }\r\n                    },\r\n                  )\r\n                : PopupMenuButton<String>(\r\n                    icon: const Icon(\r\n                      Icons.more_vert,\r\n                      color: Colors.black,\r\n                    ),\r\n                    onSelected: (value) {\r\n                      switch (value) {\r\n                        case \"Di chuyển thẻ\":\r\n                          Route route = MaterialPageRoute(builder: (context) => MoveCardScreen());\r\n                          Navigator.push(context, route);\r\n                          break;\r\n                        case \"Xóa thẻ\":\r\n                          showDialog<String>(\r\n                            context: context,\r\n                            builder: (BuildContext context) => AlertDialog(\r\n                              title: const Text(\r\n                                'Xóa thẻ',\r\n                                style: TextStyle(fontWeight: FontWeight.bold),\r\n                              ),\r\n                              content: Container(\r\n                                width: MediaQuery.of(context).size.width * 0.8,\r\n                                child: Column(\r\n                                  mainAxisSize: MainAxisSize.min,\r\n                                  children: [\r\n                                    Text(\"Tất cả các thao tác sẽ bị xóa khỏi thông báo hoạt động. Không thể hoàn tác.\"),\r\n                                    Row(\r\n                                      mainAxisAlignment: MainAxisAlignment.end,\r\n                                      children: [\r\n                                        TextButton(\r\n                                          child: Text(\r\n                                            'HỦY',\r\n                                            style: TextStyle(fontWeight: FontWeight.bold),\r\n                                          ),\r\n                                          onPressed: () {\r\n                                            Navigator.of(context).pop();\r\n                                          },\r\n                                        ),\r\n                                        TextButton(\r\n                                          child: Text(\r\n                                            'XÓA',\r\n                                            style: TextStyle(fontWeight: FontWeight.bold),\r\n                                          ),\r\n                                          onPressed: () {\r\n                                            setState(() {\r\n                                              ///TODO: delete card\r\n                                            });\r\n                                            Navigator.of(context).pop();\r\n                                            Navigator.of(context).pop();\r\n                                          },\r\n                                        )\r\n                                      ],\r\n                                    ),\r\n                                  ],\r\n                                ),\r\n                              ),\r\n                            ),\r\n                          );\r\n                          break;\r\n                      }\r\n                    },\r\n                    itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[\r\n                          const PopupMenuItem<String>(\r\n                            value: \"Di chuyển thẻ\",\r\n                            child: Text('Di chuyển thẻ'),\r\n                          ),\r\n                          const PopupMenuItem<String>(\r\n                            value: \"Xóa thẻ\",\r\n                            child: Text('Xóa thẻ'),\r\n                          ),\r\n                        ])\r\n          ]),\r\n      body: SingleChildScrollView(\r\n        child: Column(\r\n          children: [\r\n            ///Card name\r\n            Container(\r\n              width: MediaQuery.of(context).size.width,\r\n              color: Colors.white,\r\n              child: Padding(\r\n                padding: const EdgeInsets.only(left: 25.0, top: 30.0),\r\n\r\n                ///TODO: Change Tên thẻ to $cardName when data is loaded\r\n                child: Text(\"Tên thẻ\", style: TextStyle(fontSize: 30)),\r\n              ),\r\n            ),\r\n\r\n            ///Card auto-description (user cannot change this description)\r\n            Container(\r\n              width: MediaQuery.of(context).size.width,\r\n              color: Colors.white,\r\n              child: Padding(\r\n                padding: const EdgeInsets.only(left: 25.0, top: 15.0, bottom: 20.0),\r\n\r\n                ///TODO: Change Tên danh sách to $cardlistName\r\n                ///TODO: Change Tên bảng to $boardName\r\n                child: Text(\"Danh sách Tên danh sách trong Tên bảng\", style: TextStyle(fontSize: 20)),\r\n              ),\r\n            ),\r\n\r\n            ///Card Description (user can change this description)\r\n            Container(\r\n              width: MediaQuery.of(context).size.width,\r\n              padding: const EdgeInsets.only(\r\n                left: 25,\r\n                right: 25,\r\n                top: 5.0,\r\n                bottom: 5.0,\r\n              ),\r\n              decoration: BoxDecoration(\r\n                color: Colors.white,\r\n                border: Border(top: BorderSide(color: Colors.grey.shade400), bottom: BorderSide(color: Colors.grey.shade400)),\r\n              ),\r\n              child: TextField(\r\n                ///TODO: load data from database to descriptionTxtCtrl.text\r\n                controller: descriptionTxtCtrl,\r\n                style: TextStyle(fontSize: 20),\r\n                keyboardType: TextInputType.multiline,\r\n                maxLines: null,\r\n                decoration: InputDecoration(\r\n                  hintText: \"Thêm mô tả thẻ...\",\r\n                  hintStyle: TextStyle(fontSize: 20),\r\n                  contentPadding: const EdgeInsets.only(bottom: 0.0),\r\n                  border: InputBorder.none,\r\n                  focusedBorder: InputBorder.none,\r\n                  enabledBorder: InputBorder.none,\r\n                  errorBorder: InputBorder.none,\r\n                  disabledBorder: InputBorder.none,\r\n                ),\r\n              ),\r\n            ),\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n\r\n            ///Label\r\n            InkWell(\r\n              ///TODO: Add Label list to show\r\n              child: Container(\r\n                width: MediaQuery.of(context).size.width,\r\n                padding: const EdgeInsets.only(\r\n                  left: 25,\r\n                  right: 25,\r\n                  top: 20.0,\r\n                  bottom: 20.0,\r\n                ),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  border: Border(top: BorderSide(color: Colors.grey.shade400), bottom: BorderSide(color: Colors.grey.shade400)),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    Icon(MyFlutterApp2.tag),\r\n                    SizedBox(\r\n                      width: 20,\r\n                    ),\r\n                    Text(\r\n                      \"Nhãn...\",\r\n                      style: TextStyle(fontSize: 20),\r\n                    )\r\n                  ],\r\n                ),\r\n              ),\r\n              onTap: () {\r\n                ///TODO: Event to open Label list here\r\n              },\r\n            ),\r\n\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n\r\n            ///Member\r\n            InkWell(\r\n              child: Container(\r\n                width: MediaQuery.of(context).size.width,\r\n                padding: const EdgeInsets.only(\r\n                  left: 25,\r\n                  right: 25,\r\n                  top: 20.0,\r\n                  bottom: 20.0,\r\n                ),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  border: Border(top: BorderSide(color: Colors.grey.shade400), bottom: BorderSide(color: Colors.grey.shade400)),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    Icon(MyFlutterApp.person_outline),\r\n                    SizedBox(\r\n                      width: 20,\r\n                    ),\r\n                    pickedUsers.length < 1\r\n                        ? Text(\r\n                            \"Thành viên...\",\r\n                            style: TextStyle(fontSize: 20),\r\n                          )\r\n                        : Container(\r\n                            height: 50,\r\n                            child: SizedBox(\r\n                              width: MediaQuery.of(context).size.width * 0.5,\r\n                              child: ListView.builder(\r\n                                  shrinkWrap: true,\r\n                                  scrollDirection: Axis.horizontal,\r\n                                  itemCount: pickedUsers.length,\r\n                                  itemBuilder: (context, index) {\r\n                                    return CircleAvatar(\r\n                                      radius: 25,\r\n                                      backgroundImage: AssetImage(pickedUsers[index].avatar),\r\n                                    );\r\n                                  }),\r\n                            ),\r\n                          ),\r\n                  ],\r\n                ),\r\n              ),\r\n              onTap: () {\r\n                showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) => AlertDialog(\r\n                          title: const Text(\r\n                            'Thành viên của thẻ',\r\n                            style: TextStyle(fontWeight: FontWeight.bold),\r\n                          ),\r\n                          content: Container(\r\n                            width: MediaQuery.of(context).size.width,\r\n                            child: Column(\r\n                              mainAxisSize: MainAxisSize.min,\r\n                              children: [\r\n                                SingleChildScrollView(\r\n                                  child: Column(\r\n                                    children: List.generate(\r\n                                      users.length,\r\n                                      (int index) {\r\n                                        return Column(\r\n                                          children: [\r\n                                            InkWell(\r\n                                              onTap: () {\r\n                                                setState(() {\r\n                                                  flagPickedUsers[index] == true ? flagPickedUsers[index] = false : flagPickedUsers[index] = true;\r\n                                                });\r\n                                              },\r\n                                              child: Padding(\r\n                                                padding: const EdgeInsets.fromLTRB(16.0, 14.0, 0, 14.0),\r\n                                                child: Row(\r\n                                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                                                  children: [\r\n                                                    Row(\r\n                                                      children: [\r\n                                                        avatar(\r\n                                                          40,\r\n                                                          40,\r\n                                                          Colors.grey,\r\n                                                          Image.network(\r\n                                                            users[index].avatar,\r\n                                                            width: 40,\r\n                                                            height: 40,\r\n                                                          ),\r\n                                                        ),\r\n                                                        SizedBox(\r\n                                                          width: 20,\r\n                                                        ),\r\n                                                        Column(\r\n                                                          crossAxisAlignment: CrossAxisAlignment.start,\r\n                                                          children: <Widget>[\r\n                                                            Align(\r\n                                                              alignment: Alignment.centerLeft,\r\n                                                              child: Text(users[index].profileName,\r\n                                                                  textAlign: TextAlign.left, style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\r\n                                                            ),\r\n                                                            Align(\r\n                                                              alignment: Alignment.centerLeft,\r\n                                                              child: Text(\r\n                                                                '@' + users[index].userName,\r\n                                                                textAlign: TextAlign.left,\r\n                                                                style: TextStyle(fontSize: 16, fontStyle: FontStyle.italic),\r\n                                                              ),\r\n                                                            ),\r\n                                                          ],\r\n                                                        ),\r\n                                                      ],\r\n                                                    ),\r\n                                                    flagPickedUsers[index] == false\r\n                                                        ? SizedBox(\r\n                                                            width: 24,\r\n                                                          )\r\n                                                        : IconButton(\r\n                                                            onPressed: () {},\r\n                                                            icon: Icon(\r\n                                                              Icons.check,\r\n                                                            ),\r\n                                                          )\r\n                                                  ],\r\n                                                ),\r\n                                              ),\r\n                                            ),\r\n                                            Padding(\r\n                                              padding: EdgeInsets.fromLTRB(70, 0, 0, 0),\r\n                                              child: Divider(\r\n                                                height: 1,\r\n                                                color: Colors.black,\r\n                                              ),\r\n                                            ),\r\n                                          ],\r\n                                        );\r\n                                      },\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                                SizedBox(\r\n                                  height: 20,\r\n                                ),\r\n                                Row(\r\n                                  mainAxisAlignment: MainAxisAlignment.end,\r\n                                  children: [\r\n                                    Container(\r\n                                      child: TextButton(\r\n                                        onPressed: () {\r\n                                          for (Users user in users) {\r\n                                            var foundUser = pickedUsers.where((element) => element.userID == user.userID);\r\n                                            if (foundUser.isNotEmpty)\r\n                                              flagPickedUsers.add(true);\r\n                                            else\r\n                                              flagPickedUsers.add(false);\r\n                                          }\r\n                                          Navigator.of(context, rootNavigator: true).pop('dialog');\r\n                                        },\r\n                                        child: Text(\"HỦY\"),\r\n                                      ),\r\n                                    ),\r\n                                    Container(\r\n                                      child: TextButton(\r\n                                        onPressed: () {\r\n                                          setState(() {\r\n                                            pickedUsers = [];\r\n\r\n                                            ///Save new picked users\r\n                                            for (int index = 0; index < flagPickedUsers.length; index++) {\r\n                                              if (flagPickedUsers[index]) pickedUsers.add(users[index]);\r\n                                            }\r\n                                          });\r\n                                          Navigator.of(context, rootNavigator: true).pop('dialog');\r\n                                        },\r\n                                        child: Text(\"HOÀN TẤT\"),\r\n                                      ),\r\n                                    ),\r\n                                  ],\r\n                                ),\r\n                              ],\r\n                            ),\r\n                          ),\r\n                        ));\r\n              },\r\n            ),\r\n\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n\r\n            ///DateStart\r\n            InkWell(\r\n              child: Container(\r\n                width: MediaQuery.of(context).size.width,\r\n                padding: const EdgeInsets.only(\r\n                  left: 25,\r\n                  right: 25,\r\n                  top: 20.0,\r\n                  bottom: 13.0,\r\n                ),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  border: Border(\r\n                    top: BorderSide(color: Colors.grey.shade400),\r\n                  ),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    Icon(MyFlutterApp.clock),\r\n                    SizedBox(\r\n                      width: 20,\r\n                    ),\r\n                    Container(\r\n                      width: MediaQuery.of(context).size.width - 94,\r\n                      child: Text(\r\n                        startDateStr == \"\" ? \"Ngày bắt đầu...\" : \"$startDateStr\",\r\n                        style: TextStyle(fontSize: 20),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n              onTap: () {\r\n                startDateTxtCtrl.text = selectedStartDate.day.toString() + \" thg \" + selectedStartDate.month.toString();\r\n                startTimeTxtCtrl.text = selectedStartTime.hour.toString() + \":\";\r\n                if (selectedStartTime.minute >= 10)\r\n                  startTimeTxtCtrl.text = startTimeTxtCtrl.text + selectedStartTime.minute.toString();\r\n                else\r\n                  startTimeTxtCtrl.text = startTimeTxtCtrl.text + \"0\" + selectedStartTime.minute.toString();\r\n                showDialog(\r\n                  context: context,\r\n                  builder: (BuildContext context) => AlertDialog(\r\n                    title: const Text(\r\n                      'Ngày bắt đầu',\r\n                      style: TextStyle(fontWeight: FontWeight.bold),\r\n                    ),\r\n                    content: Container(\r\n                      height: 120,\r\n                      child: Column(\r\n                        children: [\r\n                          Row(\r\n                            children: [\r\n                              Container(\r\n                                width: MediaQuery.of(context).size.width / 3.7,\r\n                                child: TextField(\r\n                                  controller: startDateTxtCtrl,\r\n                                  readOnly: true,\r\n                                  showCursor: true,\r\n                                  onTap: () {\r\n                                    _selectedStartDate(context);\r\n                                  },\r\n                                  decoration: InputDecoration(\r\n                                    hintText: \"Chọn ngày\",\r\n                                    contentPadding: const EdgeInsets.only(bottom: 0),\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                              SizedBox(\r\n                                width: 10,\r\n                              ),\r\n                              Container(\r\n                                width: MediaQuery.of(context).size.width / 3.7,\r\n                                child: TextField(\r\n                                  controller: startTimeTxtCtrl,\r\n                                  readOnly: true,\r\n                                  showCursor: true,\r\n                                  onTap: () {\r\n                                    _selectedStartTime(context);\r\n                                  },\r\n                                  decoration: InputDecoration(\r\n                                    hintText: \"Chọn thời gian\",\r\n                                    contentPadding: const EdgeInsets.only(bottom: 0),\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                              Container(\r\n                                child: IconButton(\r\n                                  icon: Icon(Icons.close),\r\n                                  onPressed: () {\r\n                                    startDateTxtCtrl.text = \"\";\r\n                                    startTimeTxtCtrl.text = \"\";\r\n                                  },\r\n                                ),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                          SizedBox(\r\n                            height: 20,\r\n                          ),\r\n                          Row(\r\n                            mainAxisAlignment: MainAxisAlignment.end,\r\n                            children: [\r\n                              Container(\r\n                                child: TextButton(\r\n                                  onPressed: () {\r\n                                    ///Reset start date, if from database not null, reset it by the data\r\n                                    ///else reset it by DateTime.now()\r\n                                    selectedStartDate = DateTime.now();\r\n\r\n                                    ///Reset start time, if from database not null, reset it by the data\r\n                                    ///else reset it by TimeOfDay(hour: 9, minute: 0)\r\n                                    selectedStartTime = TimeOfDay(hour: 9, minute: 0);\r\n                                    Navigator.of(context, rootNavigator: true).pop('dialog');\r\n                                  },\r\n                                  child: Text(\"HỦY\"),\r\n                                ),\r\n                              ),\r\n                              Container(\r\n                                child: TextButton(\r\n                                  onPressed: () {\r\n                                    if (startDateTxtCtrl.text == \"\" && startTimeTxtCtrl.text == \"\") {\r\n                                      setState(() {\r\n                                        startDateStr = \"\";\r\n                                      });\r\n\r\n                                      ///Save null to database\r\n                                    } else {\r\n                                      setState(() {\r\n                                        String selectedDay = selectedStartDate.day.toString();\r\n                                        String selectedMonth = selectedStartDate.month.toString();\r\n                                        String selectedYear = selectedStartDate.year.toString();\r\n                                        String selectedTimeStr = selectedStartTime.hour.toString() +\r\n                                            (selectedStartTime.minute >= 10\r\n                                                ? \":0\" + selectedStartTime.minute.toString()\r\n                                                : \":0\" + selectedStartTime.minute.toString());\r\n                                        startDateStr = \"Bắt đầu vào ngày $selectedDay tháng $selectedMonth, năm $selectedYear lúc $selectedTimeStr\";\r\n                                      });\r\n\r\n                                      ///save selected Date and selected time to database. This condition means:\r\n                                      ///date null, time not null => save date now + time value\r\n                                      ///date not null, time null => save date value + time default at 9:00\r\n                                      ///date, time not null => save normally\r\n                                    }\r\n                                    Navigator.of(context, rootNavigator: true).pop('dialog');\r\n                                  },\r\n                                  child: Text(\"HOÀN TẤT\"),\r\n                                ),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                );\r\n              },\r\n            ),\r\n\r\n            Container(\r\n              color: Colors.white,\r\n              padding: const EdgeInsets.fromLTRB(70, 0, 0, 0),\r\n              child: Divider(color: Colors.grey.shade400),\r\n            ),\r\n\r\n            ///DateEnd\r\n            InkWell(\r\n              child: Container(\r\n                width: MediaQuery.of(context).size.width,\r\n                padding: const EdgeInsets.only(\r\n                  left: 25,\r\n                  right: 25,\r\n                  top: 13.0,\r\n                  bottom: 20.0,\r\n                ),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  border: Border(bottom: BorderSide(color: Colors.grey.shade400)),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    SizedBox(\r\n                      width: 44,\r\n                    ),\r\n                    Container(\r\n                      width: MediaQuery.of(context).size.width - 94,\r\n                      child: Text(\r\n                        endDateStr == \"\" ? \"Ngày hết hạn...\" : \"$endDateStr\",\r\n                        style: TextStyle(fontSize: 20),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n              onTap: () {\r\n                endDateTxtCtrl.text = selectedEndDate.day.toString() + \" thg \" + selectedEndDate.month.toString();\r\n                endTimeTxtCtrl.text = selectedEndTime.hour.toString() + \":\";\r\n                if (selectedEndTime.minute >= 10)\r\n                  endTimeTxtCtrl.text = endTimeTxtCtrl.text + selectedEndTime.minute.toString();\r\n                else\r\n                  endTimeTxtCtrl.text = endTimeTxtCtrl.text + \"0\" + selectedEndTime.minute.toString();\r\n                showDialog(\r\n                  context: context,\r\n                  builder: (BuildContext context) => AlertDialog(\r\n                    title: const Text(\r\n                      'Ngày hết hạn',\r\n                      style: TextStyle(fontWeight: FontWeight.bold),\r\n                    ),\r\n                    content: Container(\r\n                      height: 285,\r\n                      child: Column(\r\n                        children: [\r\n                          Row(\r\n                            children: [\r\n                              Container(\r\n                                width: MediaQuery.of(context).size.width / 3.7,\r\n                                child: TextField(\r\n                                  controller: endDateTxtCtrl,\r\n                                  readOnly: true,\r\n                                  showCursor: true,\r\n                                  onTap: () {\r\n                                    _selectedEndDate(context);\r\n                                  },\r\n                                  decoration: InputDecoration(\r\n                                    hintText: \"Chọn ngày\",\r\n                                    contentPadding: const EdgeInsets.only(bottom: 0),\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                              SizedBox(\r\n                                width: 10,\r\n                              ),\r\n                              Container(\r\n                                width: MediaQuery.of(context).size.width / 3.7,\r\n                                child: TextField(\r\n                                  controller: endTimeTxtCtrl,\r\n                                  readOnly: true,\r\n                                  showCursor: true,\r\n                                  onTap: () {\r\n                                    _selectedEndTime(context);\r\n                                  },\r\n                                  decoration: InputDecoration(\r\n                                    hintText: \"Chọn thời gian\",\r\n                                    contentPadding: const EdgeInsets.only(bottom: 0),\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                              Container(\r\n                                child: IconButton(\r\n                                  icon: Icon(Icons.close),\r\n                                  onPressed: () {\r\n                                    endDateTxtCtrl.text = \"\";\r\n                                    endTimeTxtCtrl.text = \"\";\r\n                                  },\r\n                                ),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                          SizedBox(\r\n                            height: 20,\r\n                          ),\r\n                          Container(\r\n                            alignment: Alignment.centerLeft,\r\n                            child: Text(\r\n                              \"Thiết lập nhắc nhở\",\r\n                              style: TextStyle(fontWeight: FontWeight.bold),\r\n                            ),\r\n                          ),\r\n                          SizedBox(\r\n                            height: 20,\r\n                          ),\r\n                          Container(\r\n                            width: MediaQuery.of(context).size.width,\r\n                            child: DropdownButtonFormField<String>(\r\n                              value: selectedNotiTime,\r\n                              decoration: InputDecoration(\r\n                                contentPadding: EdgeInsets.only(bottom: 0),\r\n                              ),\r\n                              onChanged: (value) {\r\n                                setState(() {\r\n                                  selectedNotiTime = value;\r\n                                });\r\n                              },\r\n                              items: notificationTimeList.map((String item) {\r\n                                return DropdownMenuItem<String>(\r\n                                    value: item,\r\n                                    child: Row(\r\n                                      children: [\r\n                                        Text(\r\n                                          item,\r\n                                        ),\r\n                                      ],\r\n                                    ));\r\n                              }).toList(),\r\n                            ),\r\n                          ),\r\n                          SizedBox(\r\n                            height: 20,\r\n                          ),\r\n                          Container(\r\n                            alignment: Alignment.centerLeft,\r\n                            child: Text(\"Nhắc nhở chỉ được gửi đến các thành viên và người theo dõi thẻ.\"),\r\n                          ),\r\n                          SizedBox(\r\n                            height: 20,\r\n                          ),\r\n                          Row(\r\n                            mainAxisAlignment: MainAxisAlignment.end,\r\n                            children: [\r\n                              Container(\r\n                                child: TextButton(\r\n                                  onPressed: () {\r\n                                    ///Reset end date, if from database not null, reset it by the data\r\n                                    ///else reset it by DateTime.now()\r\n                                    selectedEndDate = DateTime.now();\r\n\r\n                                    ///Reset end time, if from database not null, reset it by the data\r\n                                    ///else reset it by TimeOfDay(hour: 9, minute: 0)\r\n                                    selectedEndTime = TimeOfDay(hour: 9, minute: 0);\r\n                                    Navigator.of(context, rootNavigator: true).pop('dialog');\r\n                                  },\r\n                                  child: Text(\"HỦY\"),\r\n                                ),\r\n                              ),\r\n                              Container(\r\n                                child: TextButton(\r\n                                  onPressed: () {\r\n                                    if (endDateTxtCtrl.text == \"\" && endDateTxtCtrl.text == \"\") {\r\n                                      setState(() {\r\n                                        endDateStr = \"\";\r\n                                      });\r\n\r\n                                      ///Save null to database\r\n                                    } else {\r\n                                      setState(() {\r\n                                        String selectedDay = selectedEndDate.day.toString();\r\n                                        String selectedMonth = selectedEndDate.month.toString();\r\n                                        String selectedYear = selectedEndDate.year.toString();\r\n                                        String selectedTimeStr = selectedEndTime.hour.toString() +\r\n                                            (selectedEndTime.minute >= 10\r\n                                                ? \":0\" + selectedEndTime.minute.toString()\r\n                                                : \":0\" + selectedEndTime.minute.toString());\r\n                                        endDateStr = \"Hết hạn vào ngày $selectedDay tháng $selectedMonth, năm $selectedYear lúc $selectedTimeStr\";\r\n                                      });\r\n\r\n                                      ///save selected Date and selected time to database. This condition means:\r\n                                      ///date null, time not null => save date now + time value\r\n                                      ///date not null, time null => save date value + time default at 9:00\r\n                                      ///date, time not null => save normally\r\n                                    }\r\n                                    Navigator.of(context, rootNavigator: true).pop('dialog');\r\n                                  },\r\n                                  child: Text(\"HOÀN TẤT\"),\r\n                                ),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                );\r\n              },\r\n            ),\r\n\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n\r\n            ///Checklist\r\n            InkWell(\r\n              onTap: () {\r\n                ///TODO: Add new task list\r\n              },\r\n              child: Container(\r\n                width: MediaQuery.of(context).size.width,\r\n                padding: const EdgeInsets.only(\r\n                  left: 25,\r\n                  right: 25,\r\n                  top: 20.0,\r\n                  bottom: 20.0,\r\n                ),\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white,\r\n                  border: Border(top: BorderSide(color: Colors.grey.shade400), bottom: BorderSide(color: Colors.grey.shade400)),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    Icon(MyFlutterApp2.check),\r\n                    SizedBox(\r\n                      width: 20,\r\n                    ),\r\n                    Text(\r\n                      \"Danh sách công việc...\",\r\n                      style: TextStyle(fontSize: 20),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n\r\n            isHaveTaskList\r\n                ? Column(\r\n                    children: [\r\n                      Padding(\r\n                        padding: const EdgeInsets.fromLTRB(20, 8, 20, 8),\r\n                        child: Row(\r\n                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                          children: [\r\n                            Row(\r\n                              children: [\r\n                                Icon(MyFlutterApp2.check),\r\n                                SizedBox(\r\n                                  width: 20,\r\n                                ),\r\n                                Text(\r\n                                  \"DANH SÁCH CÔNG VIỆC\",\r\n                                  style: TextStyle(fontSize: 20),\r\n                                ),\r\n                              ],\r\n                            ),\r\n                            IconButton(\r\n                              onPressed: () {\r\n                                ///TODO: Add new task list\r\n                              },\r\n                              icon: Icon(Icons.add),\r\n                              color: Colors.blue,\r\n                              iconSize: 30,\r\n                            ),\r\n                          ],\r\n                        ),\r\n                      ),\r\n                      Column(\r\n                        children: List.generate(\r\n                            taskListNames.length,\r\n                            (index) => Column(\r\n                                  children: [\r\n                                    ///Header\r\n                                    InkWell(\r\n                                      onTap: () {\r\n                                        setState(() {});\r\n                                      },\r\n                                      child: Container(\r\n                                        padding: const EdgeInsets.fromLTRB(20, 8, 20, 8),\r\n                                        decoration: BoxDecoration(\r\n                                            color: Colors.white,\r\n                                            border: Border(\r\n                                              top: BorderSide(color: Colors.grey.shade400),\r\n                                              bottom: BorderSide(color: Colors.grey.shade400),\r\n                                            )),\r\n                                        child: Row(\r\n                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                                          children: [\r\n                                            //Text(\r\n                                            //  taskListNames[index],\r\n                                            //  style: TextStyle(\r\n                                            //    fontSize: 20,\r\n                                            //  ),\r\n                                            //),\r\n                                            Container(\r\n                                              width: MediaQuery.of(context).size.width - 140,\r\n                                              child: Focus(\r\n                                                child: TextField(\r\n                                                  controller: controllersList[index],\r\n                                                  style: TextStyle(fontSize: 20),\r\n                                                  decoration: InputDecoration(\r\n                                                    border: InputBorder.none,\r\n                                                    focusedBorder: InputBorder.none,\r\n                                                    enabledBorder: InputBorder.none,\r\n                                                    errorBorder: InputBorder.none,\r\n                                                    disabledBorder: InputBorder.none,\r\n                                                    hintStyle: TextStyle(fontSize: 20),\r\n                                                  ),\r\n                                                ),\r\n                                                onFocusChange: (hasFocus) {\r\n                                                  if (hasFocus) {\r\n                                                    setState(() {\r\n                                                      isChangeListName = true;\r\n                                                      xChangeTaskListName = index;\r\n                                                    });\r\n                                                  } else {\r\n                                                    setState(() {\r\n                                                      isChangeListName = false;\r\n                                                      xChangeTaskListName = -1;\r\n                                                    });\r\n                                                  }\r\n                                                },\r\n                                              ),\r\n                                            ),\r\n                                            Row(\r\n                                              children: [\r\n                                                AnimatedIconButton(\r\n                                                    size: 25,\r\n                                                    onPressed: () => {\r\n                                                          setState(() {\r\n                                                            isShow[index] = !isShow[index];\r\n                                                          })\r\n                                                        },\r\n                                                    icons: [\r\n                                                      AnimatedIconItem(\r\n                                                        icon: Icon(\r\n                                                          Icons.keyboard_arrow_down,\r\n                                                          color: Colors.black,\r\n                                                        ),\r\n                                                      ),\r\n                                                      AnimatedIconItem(\r\n                                                        icon: Icon(\r\n                                                          Icons.keyboard_arrow_up,\r\n                                                          color: Colors.black,\r\n                                                        ),\r\n                                                      ),\r\n                                                    ]),\r\n                                                PopupMenuButton(\r\n                                                  iconSize: 30,\r\n                                                  padding: EdgeInsets.zero,\r\n                                                  icon: Icon(Icons.more_horiz),\r\n                                                  onSelected: (value) {\r\n                                                    ///TODO: Delete task list\r\n                                                  },\r\n                                                  itemBuilder: (context) => [\r\n                                                    PopupMenuItem(\r\n                                                      value: 1,\r\n                                                      child: Text(\r\n                                                        'Xóa',\r\n                                                        style: TextStyle(\r\n                                                          fontSize: 20,\r\n                                                        ),\r\n                                                      ),\r\n                                                    ),\r\n                                                  ],\r\n                                                )\r\n                                              ],\r\n                                            )\r\n                                          ],\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    Container(\r\n                                      height: 5,\r\n                                      decoration: BoxDecoration(color: Color.fromRGBO(188, 217, 234, 1)),\r\n                                      child: Row(),\r\n                                    ),\r\n                                    isShow[index]\r\n                                        ? Container(\r\n                                            decoration: BoxDecoration(\r\n                                              color: Colors.white,\r\n                                            ),\r\n                                            child: Column(\r\n                                              children: [\r\n                                                Column(\r\n                                                  children: List.generate(\r\n                                                    tasks[index].length,\r\n                                                    (innerIndex) => Column(\r\n                                                      children: [\r\n                                                        Row(\r\n                                                          children: [\r\n                                                            Transform.scale(\r\n                                                              scale: 1.2,\r\n                                                              child: Checkbox(\r\n                                                                value: isTaskDone[index][innerIndex],\r\n                                                                onChanged: (value) {\r\n                                                                  setState(() {\r\n                                                                    isTaskDone[index][innerIndex] = !isTaskDone[index][innerIndex];\r\n\r\n                                                                    ///TODO: Change state of task\r\n                                                                  });\r\n                                                                },\r\n                                                              ),\r\n                                                            ),\r\n                                                            Container(\r\n                                                              width: MediaQuery.of(context).size.width - 100,\r\n                                                              child: Focus(\r\n                                                                child: TextField(\r\n                                                                  controller: controllers[index][innerIndex],\r\n                                                                  style: TextStyle(fontSize: 20),\r\n                                                                  decoration: InputDecoration(\r\n                                                                    border: InputBorder.none,\r\n                                                                    focusedBorder: InputBorder.none,\r\n                                                                    enabledBorder: InputBorder.none,\r\n                                                                    errorBorder: InputBorder.none,\r\n                                                                    disabledBorder: InputBorder.none,\r\n                                                                    hintStyle: TextStyle(fontSize: 20),\r\n                                                                  ),\r\n                                                                ),\r\n                                                                onFocusChange: (hasFocus) {\r\n                                                                  if (hasFocus) {\r\n                                                                    setState(() {\r\n                                                                      isChangeTaskListName = true;\r\n                                                                      xChangeTaskListName = index;\r\n                                                                      yChangeTaskListName = innerIndex;\r\n                                                                    });\r\n                                                                  } else {\r\n                                                                    setState(() {\r\n                                                                      isChangeTaskListName = false;\r\n                                                                      xChangeTaskListName = -1;\r\n                                                                      yChangeTaskListName = -1;\r\n                                                                    });\r\n                                                                  }\r\n                                                                },\r\n                                                              ),\r\n                                                            ),\r\n                                                            isChangeTaskListName && index == xChangeTaskListName && innerIndex == yChangeTaskListName\r\n                                                                ? IconButton(onPressed: () {}, icon: Icon(Icons.delete))\r\n                                                                : SizedBox(\r\n                                                                    width: 0,\r\n                                                                  ),\r\n                                                          ],\r\n                                                        ),\r\n                                                        Padding(\r\n                                                          padding: const EdgeInsets.fromLTRB(50, 0, 0, 0),\r\n                                                          child: Divider(),\r\n                                                        ),\r\n                                                      ],\r\n                                                    ),\r\n                                                  ),\r\n                                                ),\r\n                                                Padding(\r\n                                                  padding: const EdgeInsets.fromLTRB(0, 2, 0, 8),\r\n                                                  child: Row(\r\n                                                    children: [\r\n                                                      SizedBox(\r\n                                                        width: 50,\r\n                                                      ),\r\n                                                      Container(\r\n                                                        width: MediaQuery.of(context).size.width - 70,\r\n                                                        child: Focus(\r\n                                                          child: TextField(\r\n                                                            style: TextStyle(fontSize: 20),\r\n                                                            cursorColor: Colors.blue,\r\n                                                            decoration: InputDecoration(\r\n                                                              border: InputBorder.none,\r\n                                                              focusedBorder: InputBorder.none,\r\n                                                              enabledBorder: InputBorder.none,\r\n                                                              errorBorder: InputBorder.none,\r\n                                                              disabledBorder: InputBorder.none,\r\n                                                              hintText: \"Thêm mục…\",\r\n                                                              hintStyle: TextStyle(fontSize: 20),\r\n                                                            ),\r\n                                                          ),\r\n                                                          onFocusChange: (hasFocus) {\r\n                                                            if (hasFocus) {\r\n                                                              setState(() {\r\n                                                                isAddTask = true;\r\n                                                              });\r\n                                                            } else {\r\n                                                              setState(() {\r\n                                                                isAddTask = false;\r\n                                                              });\r\n                                                            }\r\n                                                          },\r\n                                                        ),\r\n                                                      ),\r\n                                                    ],\r\n                                                  ),\r\n                                                ),\r\n                                              ],\r\n                                            ),\r\n                                          )\r\n                                        : SizedBox(\r\n                                            height: 0,\r\n                                          ),\r\n                                  ],\r\n                                )),\r\n                      ),\r\n                    ],\r\n                  )\r\n                : SizedBox(\r\n                    height: 0,\r\n                  ),\r\n\r\n            ///Comment display here\r\n            ///TODO: remember to change list to the loaded commentList\r\n            commentUserIDList.length < 1 ? SizedBox(height: 30) :\r\n            Column(\r\n                children: List.generate(\r\n              commentUserIDList.length,\r\n              (index) => Padding(\r\n                padding: const EdgeInsets.only(left: 25, right: 20, top: 20),\r\n                child: Row(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    Padding(\r\n                      padding: const EdgeInsets.only(top: 20),\r\n                      child: CircleAvatar(\r\n                        radius: 25,\r\n\r\n                        ///TODO: Load Avatar\r\n                        backgroundImage: AssetImage(commentUserAvatarList[index]),\r\n                      ),\r\n                    ),\r\n                    SizedBox(width: 20),\r\n                    Column(\r\n                      mainAxisAlignment: MainAxisAlignment.start,\r\n                      children: [\r\n                        ///User Name\r\n                        Container(\r\n                          width: MediaQuery.of(context).size.width - 115,\r\n                          child: Row(\r\n                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                            children: [\r\n                              ///TODO: Load User Name who comments this\r\n                              Text(\r\n                                commentUserNameList[index],\r\n                                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),\r\n                              ),\r\n\r\n                              PopupMenuButton(\r\n                                  icon: Icon(Icons.more_horiz),\r\n                                  itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[\r\n                                        const PopupMenuItem<String>(\r\n                                          value: \"Chỉnh sửa\",\r\n                                          child: Text('Chỉnh sửa'),\r\n                                        ),\r\n                                        const PopupMenuItem<String>(\r\n                                          value: \"Xóa\",\r\n                                          child: Text('Xóa'),\r\n                                        ),\r\n                                      ]),\r\n                            ],\r\n                          ),\r\n                        ),\r\n\r\n                        ///Comment content\r\n                        Container(\r\n                          width: MediaQuery.of(context).size.width - 115,\r\n                          decoration: BoxDecoration(\r\n                            color: Colors.white,\r\n                            borderRadius: BorderRadius.all(Radius.circular(10)),\r\n                          ),\r\n                          child: TextField(\r\n                            controller: commentContentTxtCtrlList[index],\r\n                            readOnly: true,\r\n                            keyboardType: TextInputType.multiline,\r\n                            maxLines: null,\r\n                            decoration: InputDecoration(\r\n                              contentPadding: const EdgeInsets.all(5),\r\n                              border: InputBorder.none,\r\n                              focusedBorder: InputBorder.none,\r\n                              enabledBorder: InputBorder.none,\r\n                              errorBorder: InputBorder.none,\r\n                              disabledBorder: InputBorder.none,\r\n                            ),\r\n                          ),\r\n                        ),\r\n\r\n                        SizedBox(height: 10),\r\n\r\n                        ///Load date comment\r\n                        ///TODO: change suitable variable to the\r\n                        ///Format hh:mm dd/mm/yyyy if year is different from current year\r\n                        ///Format hh:mm dd/mm if year is equal to current year\r\n                        Container(\r\n                          alignment: Alignment.centerLeft,\r\n                          width: MediaQuery.of(context).size.width - 115,\r\n                          child: commentDateList[index].year == DateTime.now().year\r\n                              ? Text(commentDateList[index].hour.toString() +\r\n                                  \":\" +\r\n                                  (commentDateList[index].minute >= 10\r\n                                      ? commentDateList[index].minute.toString()\r\n                                      : \"0\" + commentDateList[index].minute.toString()) +\r\n                                  \" \" +\r\n                                  commentDateList[index].day.toString() +\r\n                                  \"/\" +\r\n                                  commentDateList[index].month.toString())\r\n                              : Text(commentDateList[index].hour.toString() +\r\n                                  \":\" +\r\n                                  (commentDateList[index].minute >= 10\r\n                                      ? commentDateList[index].minute.toString()\r\n                                      : \"0\" + commentDateList[index].minute.toString()) +\r\n                                  \" \" +\r\n                                  commentDateList[index].day.toString() +\r\n                                  \"/\" +\r\n                                  commentDateList[index].month.toString() +\r\n                                  \"/\" +\r\n                                  commentDateList[index].year.toString()),\r\n                        ),\r\n\r\n                        SizedBox(height: 20),\r\n                      ],\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            )),\r\n\r\n            ///for bottom sheet not cover last element\r\n            SizedBox(\r\n              height: 69,\r\n            )\r\n          ],\r\n        ),\r\n      ),\r\n\r\n      ///comment\r\n      bottomSheet: BottomAppBar(\r\n        child: Container(\r\n          padding: const EdgeInsets.all(5.0),\r\n          decoration: BoxDecoration(\r\n            color: Colors.white,\r\n            boxShadow: [\r\n              BoxShadow(\r\n                color: Colors.grey.withOpacity(0.5),\r\n                spreadRadius: 2,\r\n                blurRadius: 3,\r\n                offset: Offset(0, 3), // changes position of shadow\r\n              ),\r\n            ],\r\n          ),\r\n          child: Row(\r\n            children: [\r\n              avatar(50, 50, Colors.grey, Image.asset('assets/images/BlueBG.png')),\r\n              SizedBox(\r\n                width: 10,\r\n              ),\r\n              Expanded(\r\n                child: TextField(\r\n                  controller: commentEnterTxtCtrl,\r\n                  decoration: InputDecoration(\r\n                    hintText: 'Enter a message',\r\n                    suffixIcon: IconButton(\r\n                      onPressed: () {},\r\n                      icon: Icon(\r\n                        Icons.send,\r\n                        size: 30,\r\n                      ),\r\n                    ),\r\n                    border: new OutlineInputBorder(\r\n                      borderRadius: const BorderRadius.all(\r\n                        const Radius.circular(30.0),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- trello_clone/lib/screens/card_screen/card_screen.dart	(revision 7ee2a6a6ca3c8fe0f54244cf2d6e99e64489276b)
+++ trello_clone/lib/screens/card_screen/card_screen.dart	(date 1625685156723)
@@ -587,9 +587,9 @@
                                           children: [
                                             InkWell(
                                               onTap: () {
-                                                setState(() {
-                                                  flagPickedUsers[index] == true ? flagPickedUsers[index] = false : flagPickedUsers[index] = true;
-                                                });
+                                                WidgetsBinding.instance!.addPostFrameCallback((timeStamp) {setState(() {
+                                                  flagPickedUsers[index] = !flagPickedUsers[index];
+                                                }); }) ;
                                               },
                                               child: Padding(
                                                 padding: const EdgeInsets.fromLTRB(16.0, 14.0, 0, 14.0),
@@ -602,7 +602,7 @@
                                                           40,
                                                           40,
                                                           Colors.grey,
-                                                          Image.network(
+                                                          Image.asset(
                                                             users[index].avatar,
                                                             width: 40,
                                                             height: 40,
@@ -632,9 +632,13 @@
                                                       ],
                                                     ),
                                                     flagPickedUsers[index] == false
-                                                        ? SizedBox(
-                                                            width: 24,
-                                                          )
+                                                        ? IconButton(
+                                                      onPressed: () {},
+                                                      icon: Icon(
+                                                        Icons.check,
+                                                        color: Colors.transparent,
+                                                      ),
+                                                    )
                                                         : IconButton(
                                                             onPressed: () {},
                                                             icon: Icon(
